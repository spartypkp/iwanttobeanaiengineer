/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type WorkHistory = {
	_id: string;
	_type: "workHistory";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	company?: string;
	position?: string;
	slug?: Slug;
	startDate?: string;
	endDate?: string;
	isCurrent?: boolean;
	description?: string;
	responsibilities?: Array<string>;
	achievements?: Array<string>;
	projects?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "project";
	}>;
	technologies?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "technology";
	}>;
	skills?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "skill";
	}>;
	location?: string;
	url?: string;
	displayOrder?: number;
};

export type Technology = {
	_id: string;
	_type: "technology";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	slug?: Slug;
	category?:
		| "frontend"
		| "backend"
		| "data"
		| "devops"
		| "ai"
		| "design"
		| "other";
	description?: string;
	website?: string;
	logo?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	color?: string;
	icon?: string;
	experience?: {
		years?: number;
		level?: "beginner" | "intermediate" | "advanced" | "expert";
		notes?: string;
	};
	featured?: boolean;
};

export type Skill = {
	_id: string;
	_type: "skill";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	slug?: Slug;
	category?:
		| "programming"
		| "frameworks"
		| "ai"
		| "cloud"
		| "tools"
		| "soft"
		| "domain";
	description?: string;
	proficiency?: "beginner" | "intermediate" | "advanced" | "expert";
	yearsExperience?: number;
	projects?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "project";
	}>;
	relatedSkills?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "skill";
	}>;
	technologies?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "technology";
	}>;
	examples?: Array<{
		title?: string;
		description?: string;
		code?: string;
		language?: string;
		_key: string;
	}>;
	resources?: Array<{
		title?: string;
		url?: string;
		type?: "course" | "book" | "article" | "video" | "docs" | "other";
		_key: string;
	}>;
	featured?: boolean;
};

export type ProjectCategory = {
	_id: string;
	_type: "projectCategory";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	description?: string;
	color?: string;
	icon?: string;
	displayOrder?: number;
};

export type Project = {
	_id: string;
	_type: "project";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	id?: string;
	description?: string;
	company?: string;
	isFeatured?: boolean;
	primaryColor?: string;
	timeline?: {
		startDate?: string;
		endDate?: string;
		status?:
			| "active"
			| "completed"
			| "maintenance"
			| "archived"
			| "concept";
	};
	problem?: string;
	solution?: string;
	challenges?: Array<{
		title?: string;
		description?: string;
		_key: string;
	}>;
	approach?: Array<{
		title?: string;
		description?: string;
		_key: string;
	}>;
	technicalInsights?: Array<{
		title?: string;
		description?: string;
		code?: string;
		language?: string;
		_key: string;
	}>;
	learnings?: Array<string>;
	achievements?: Array<string>;
	personalContribution?: string;
	results?: Array<string>;
	metrics?: Array<{
		label?: string;
		value?: number;
		unit?: string;
		_key: string;
	}>;
	technologies?: Array<{
		name?: string;
		category?:
			| "frontend"
			| "backend"
			| "data"
			| "devops"
			| "ai"
			| "design"
			| "other";
		proficiency?: "beginner" | "intermediate" | "advanced" | "expert";
		_key: string;
	}>;
	categories?: Array<string>;
	tags?: Array<string>;
	complexity?: "simple" | "medium" | "complex" | "enterprise";
	media?: Array<{
		type?: "image" | "video" | "demo" | "3d";
		videoSource?: "upload" | "url";
		videoFile?: {
			asset?: {
				_ref: string;
				_type: "reference";
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
			};
			media?: unknown;
			_type: "file";
		};
		image?: {
			asset?: {
				_ref: string;
				_type: "reference";
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
			};
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt?: string;
			_type: "image";
		};
		url?: string;
		alt?: string;
		poster?: {
			asset?: {
				_ref: string;
				_type: "reference";
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
			};
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			_type: "image";
		};
		isThumbnail?: boolean;
		_key: string;
	}>;
	github?: string;
	demoUrl?: string;
	caseStudyUrl?: string;
	blogPosts?: Array<{
		title?: string;
		url?: string;
		_key: string;
	}>;
	documentation?: string;
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type KnowledgeBase = {
	_id: string;
	_type: "knowledgeBase";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	category?:
		| "personal"
		| "professional"
		| "education"
		| "projects"
		| "skills"
		| "experience"
		| "preferences"
		| "faq";
	question?: string;
	content?: string;
	keywords?: Array<string>;
	relatedProjects?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "project";
	}>;
	relatedSkills?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "skill";
	}>;
	relatedKnowledge?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "knowledgeBase";
	}>;
	source?: string;
	lastVerified?: string;
	priority?: number;
	isPublic?: boolean;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type BlockContent = Array<
	| {
			children?: Array<{
				marks?: Array<string>;
				text?: string;
				_type: "span";
				_key: string;
			}>;
			style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
			listItem?: "bullet";
			markDefs?: Array<{
				href?: string;
				_type: "link";
				_key: string;
			}>;
			level?: number;
			_type: "block";
			_key: string;
	  }
	| {
			asset?: {
				_ref: string;
				_type: "reference";
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
			};
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt?: string;
			_type: "image";
			_key: string;
	  }
>;

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| Geopoint
	| WorkHistory
	| Technology
	| Skill
	| ProjectCategory
	| Project
	| SanityFileAsset
	| KnowledgeBase
	| Slug
	| BlockContent
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
